
//在线处理法T(n)
func maxSubArray(nums []int) int {
    var( Maxsum int
        Thissum int )
    Thissum=nums[0]
    Maxsum=Thissum
    for i:=1;i<=len(nums)-1;i++ {
        num:=nums[i]
        if num>num+Thissum {
            Thissum=num
        }else {
            Thissum+=num
        }     
    if Thissum > Maxsum {
        Maxsum=Thissum
    }  }
    return Maxsum
}
/*分析题目
1.给定一个整数数组nums，找到具有最大和的连续子数组 
2.用在线处理法，判断
3.设置两个变量，一个是最终输出的MAX，另一个用来寻找最大和的Thissum。
4.思想是：假设 Thissum从[0]开始 和下一个元素的合 如果比 该元素大，说明Thissum 可以累加进来
5.直到 Thissum 值 加上假设[n]元素的值 比[n]元素的值还小时 ， 就停止了这段扫描。
5.1.在这段扫描里 共拿到n个Thissum 且每次循环都比较大小 能拿到1个最大的Thissum 赋值给MAX
6.开始以[n]元素为头的 第二次扫描，以此类推 扫描到最后一个元素。
7.就可以比较出最大的连续合为多少



*/
